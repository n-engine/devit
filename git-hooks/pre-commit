#!/usr/bin/env bash
# DevIt Pre-Commit Hook - Anti-Stub Guardian üõ°Ô∏è
# Emp√™che Claude Code de commit du code pourri avec des stubs
set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}üîç DevIt Pre-Commit: V√©rification anti-stubs...${NC}"

# Patterns mortels qu'on refuse cat√©goriquement
FORBIDDEN_PATTERNS=(
    "unimplemented!()"
    "todo!()"
    "TODO:"
    "FIXME:"
    "panic!(\"not implemented"
    "return Ok(())"
    "// TODO"
    "// FIXME"
    "#\[ignore\]"
)

# Fichiers √† v√©rifier (seulement les modifi√©s/ajout√©s)
FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(rs|toml|sh|py)$' || true)

if [ -z "$FILES" ]; then
    echo -e "${GREEN}‚úÖ Aucun fichier code √† v√©rifier${NC}"
    exit 0
fi

VIOLATIONS=()
STUB_COUNT=0

# Check chaque pattern dans chaque fichier
for file in $FILES; do
    if [ ! -f "$file" ]; then
        continue
    fi
    
    for pattern in "${FORBIDDEN_PATTERNS[@]}"; do
        # Utilise grep avec √©chappement appropri√©
        escaped_pattern=$(printf '%s\n' "$pattern" | sed 's/[[\.*^$()+?{|]/\\&/g')
        if grep -Fn "$escaped_pattern" "$file" 2>/dev/null; then
            VIOLATIONS+=("$file contient: $pattern")
            ((STUB_COUNT++))
        fi
    done
done

# Si violations trouv√©es, BLOQUER LE COMMIT
if [ ${#VIOLATIONS[@]} -gt 0 ]; then
    echo -e "${RED}‚ùå COMMIT BLOQU√â - Code stub d√©tect√©!${NC}"
    echo -e "${RED}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    for violation in "${VIOLATIONS[@]}"; do
        echo -e "${RED}  ‚ö†Ô∏è  $violation${NC}"
    done
    
    echo -e "${RED}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${YELLOW}üìù Instructions pour Claude Code:${NC}"
    echo "  1. Remplacez TOUS les stubs par du vrai code"
    echo "  2. unimplemented!() ‚Üí impl√©mentez la logique compl√®te"
    echo "  3. return Ok(()) ‚Üí retournez une vraie valeur avec donn√©es"
    echo "  4. TODO/FIXME ‚Üí finissez le travail MAINTENANT"
    echo ""
    echo -e "${YELLOW}‚ö° DIRECTIVE CLAUDE CODE:${NC}"
    echo "  Vous DEVEZ impl√©menter le code complet."
    echo "  Pas de placeholder, pas de stub, du VRAI CODE!"
    echo ""
    
    exit 1
fi

# V√©rification suppl√©mentaire: pas de fonctions vides suspectes
echo -e "${YELLOW}üîç V√©rification des fonctions vides...${NC}"

EMPTY_FUNCS=0
for file in $FILES; do
    if [[ "$file" == *.rs ]]; then
        # D√©tecte les patterns de fonctions vides suspectes
        if grep -E 'fn .+\([^)]*\).*\{[\s]*\}' "$file" 2>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Fonction potentiellement vide dans $file${NC}"
            ((EMPTY_FUNCS++))
        fi
    fi
done

if [ $EMPTY_FUNCS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $EMPTY_FUNCS fonction(s) vide(s) d√©tect√©e(s) - V√©rifiez qu'elles sont intentionnelles${NC}"
fi

echo -e "${GREEN}‚úÖ Pre-commit OK - Code propre, sans stubs!${NC}"
exit 0
