name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    name: Build, fmt, clippy, test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "guard: no tracked files under dist/"
        run: |
          set -euo pipefail
          files=$(git ls-files dist || true)
          if [ -n "$files" ]; then
            echo "dist/ contains tracked files:" >&2
            echo "$files" | sed -n '1,50p' >&2
            exit 1
          fi
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: fmt (check)
        id: fmt
        continue-on-error: true
        run: cargo fmt --all -- --check

      - name: rustfmt patch (artifact)
        if: steps.fmt.outcome == 'failure'
        run: |
          cargo fmt --all
          git diff > rustfmt.patch || true
        shell: bash

      - name: Upload rustfmt.patch
        if: steps.fmt.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: rustfmt-patch
          path: rustfmt.patch

      - name: Fail on formatting
        if: steps.fmt.outcome == 'failure'
        run: |
          echo "Formatting issues detected. Download rustfmt-patch artifact to apply." >&2
          exit 1

      - name: clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: build
        run: cargo build --workspace --all-targets

      - name: Install coreutils (macOS)
        if: runner.os == 'macOS'
        run: brew install coreutils

      - name: validate commit messages (PR only)
        if: github.event_name == 'pull_request'
        run: |
          set -euo pipefail
          BASE="origin/${GITHUB_BASE_REF}"
          git fetch origin "${GITHUB_BASE_REF}:${GITHUB_BASE_REF}" --depth=200 || true
          echo "Checking commit messages between $BASE..HEAD"
          bad=0
          while read -r subject; do
            # Allow merge and revert commits
            if [[ "$subject" =~ ^Merge\ .* || "$subject" =~ ^Revert\ .* ]]; then
              continue
            fi
            if [[ ! "$subject" =~ ^(feat|fix|chore|docs|test|refactor)(\(.*\))?:\ .{1,72}$ ]]; then
              echo "Invalid commit subject: $subject" >&2
              bad=1
            fi
          done < <(git log --format=%s "$BASE"..HEAD)
          if [ "$bad" -ne 0 ]; then
            echo "Commit messages must follow Conventional Commits and â‰¤72 chars" >&2
            exit 1
          fi

      - name: test (workspace, no-fail-fast)
        env:
          DEVIT_TIMEOUT_SECS: 300
        run: |
          set -euo pipefail
          TO=$(command -v timeout || command -v gtimeout || echo "")
          if [ -n "$TO" ]; then
            "$TO" "${DEVIT_TIMEOUT_SECS}s" cargo test --workspace --all-targets --no-fail-fast
          else
            echo "warn: no timeout available; running tests without external timeout" >&2
            cargo test --workspace --all-targets --no-fail-fast
          fi

      - name: Generate DevIt reports (SARIF/JUnit)
        run: |
          cargo run -p devit-cli --bin devit -- report sarif >/dev/null
          cargo run -p devit-cli --bin devit -- report junit >/dev/null

      - name: Aggregate quality (thresholds)
        run: |
          target/debug/devit quality gate --junit .devit/reports/junit.xml --sarif .devit/reports/sarif.json --json | tee .devit/reports/quality.json

      - name: Upload DevIt reports
        uses: actions/upload-artifact@v4
        with:
          name: devit-reports-${{ matrix.os }}
          path: .devit/reports

      - name: Upload SARIF to GitHub Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .devit/reports/sarif.json

      - name: PR comment (DevIt Quality Summary)
        if: always() && github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "### DevIt Quality Summary" > /tmp/devit_summary.md
          jq -r '"- Tests: (.payload.summary.tests_failed)/(.payload.summary.tests_total) failed\n- Lint: (.payload.summary.lint_errors) errors, (.payload.summary.lint_warnings) warnings\n- Verdict: ((.payload.pass|tostring))"' .devit/reports/quality.json >> /tmp/devit_summary.md
          gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/devit_summary.md

      - name: Fail on thresholds
        run: |
          jq -e '.payload.pass == true' .devit/reports/quality.json >/dev/null || exit 1

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Build release
        run: cargo build --release -p devit-cli --bin devit
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: devit-${{ matrix.os }}
          path: target/release/devit

  mcp_e2e:
    name: MCP E2E smoke
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build experimental bins
        run: cargo build -p devit-cli --features experimental --bins
      - name: Run E2E MCP
        run: |
          set -euo pipefail
          SRV="target/debug/devit-mcpd --yes --devit-bin target/debug/devit"
          ($SRV & echo $! > mcpd.pid)
          sleep 0.5
          target/debug/devit-mcp --cmd "$SRV" --policy >/dev/null
          target/debug/devit-mcp --cmd "$SRV" --call server.health --json '{}' >/dev/null
          target/debug/devit-mcp --cmd "$SRV" --call server.stats --json '{}' >/dev/null
          kill $(cat mcpd.pid) || true

  lint_meta:
    name: Lint meta (flags + errors)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Install ripgrep
        run: |
          sudo apt-get update
          sudo apt-get install -y ripgrep
      - uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Lint flags
        run: make lint-flags
      - name: Lint JSON errors shape
        run: scripts/lint_errors.sh
  mini_pipeline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build
        run: cargo build --workspace
      - name: Run mini pipeline (verbose)
        run: |
          chmod +x scripts/mini_patch_pipeline_verbose.sh
          ./scripts/mini_patch_pipeline_verbose.sh
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: devit-reports
          path: .devit/reports
