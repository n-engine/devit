diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml
new file mode 100644
--- /dev/null
+++ b/.github/workflows/release.yml
@@ -0,0 +1,83 @@
+name: Release
+
+on:
+  workflow_dispatch:
+    inputs:
+      tag:
+        description: "Tag à publier (ex: v0.2.0-rc.1)"
+        required: true
+        default: "v0.2.0-rc.1"
+      draft:
+        description: "Créer en draft"
+        required: true
+        type: boolean
+        default: true
+  push:
+    tags:
+      - "v*"
+
+jobs:
+  release:
+    name: create/update GitHub Release
+    runs-on: ubuntu-latest
+    permissions:
+      contents: write
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v4
+
+      - name: Determine tag
+        id: tag
+        shell: bash
+        run: |
+          set -euo pipefail
+          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
+            TAG="${{ github.event.inputs.tag }}"
+          else
+            TAG="${GITHUB_REF_NAME}"
+          fi
+          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
+          echo "TAG=$TAG" >> "$GITHUB_ENV"
+
+      - name: Extract release notes
+        id: notes
+        shell: bash
+        run: |
+          set -euo pipefail
+          chmod +x scripts/extract_release_notes.sh
+          scripts/extract_release_notes.sh "${{ steps.tag.outputs.tag }}" > notes.md
+          echo "notes_file=$(pwd)/notes.md" >> "$GITHUB_OUTPUT"
+          echo "Notes generated for tag ${{ steps.tag.outputs.tag }}"
+          sed -n '1,40p' notes.md || true
+
+      - name: Decide draft flag
+        id: draft
+        shell: bash
+        run: |
+          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
+            echo "draft=${{ github.event.inputs.draft }}" >> "$GITHUB_OUTPUT"
+          else
+            echo "draft=false" >> "$GITHUB_OUTPUT"
+          fi
+
+      - name: Create or update release
+        uses: softprops/action-gh-release@v2
+        with:
+          tag_name: ${{ steps.tag.outputs.tag }}
+          draft: ${{ steps.draft.outputs.draft }}
+          body_path: ${{ steps.notes.outputs.notes_file }}
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
diff --git a/scripts/extract_release_notes.sh b/scripts/extract_release_notes.sh
new file mode 100755
--- /dev/null
+++ b/scripts/extract_release_notes.sh
@@ -0,0 +1,96 @@
+#!/usr/bin/env bash
+set -euo pipefail
+# Usage: scripts/extract_release_notes.sh v0.2.0-rc.1
+# Sort la section de RELEASE_NOTES.md correspondant au tag.
+# Stratégie:
+#   1) "## <tag>" exact
+#   2) "## v<tag>" (si l'input est "0.2.0-rc.1")
+#   3) Si tag =~ ^v0\.2, fallback "## v0.2-rc"
+#   4) Sinon: tout le fichier + warning
+
+TAG="${1:-}"
+if [[ -z "${TAG}" ]]; then
+  echo "error: missing tag argument" >&2
+  exit 2
+fi
+
+NOTES="RELEASE_NOTES.md"
+if [[ ! -f "${NOTES}" ]]; then
+  echo "error: ${NOTES} not found" >&2
+  exit 3
+fi
+
+# Normaliser
+RAW="${TAG#v}"      # "v0.2.0-rc.1" -> "0.2.0-rc.1"
+VRAW="v${RAW}"      # "0.2.0-rc.1"  -> "v0.2.0-rc.1"
+
+extract_section() {
+  local header="$1" # e.g. "## v0.2.0-rc.1"
+  awk -v H="$header" '
+    BEGIN { printing=0 }
+    $0 ~ "^"H"[[:space:]]*$" { printing=1; next }
+    printing && $0 ~ "^##[[:space:]]" { exit }
+    printing { print }
+  ' "${NOTES}"
+}
+
+try_print() {
+  local hdr="$1"
+  local out
+  out="$(extract_section "$hdr" || true)"
+  if [[ -n "${out//[[:space:]]/}" ]]; then
+    echo "$hdr"
+    echo
+    echo "$out"
+    return 0
+  fi
+  return 1
+}
+
+# 1) "## <tag>"
+if try_print "## ${TAG}"; then exit 0; fi
+# 2) "## v<tag>" si l'input ne commence pas par v
+if [[ "${TAG}" != "${VRAW}" ]]; then
+  if try_print "## ${VRAW}"; then exit 0; fi
+fi
+# 3) Fallback rc bucket (ex: v0.2-rc) si le tag commence par v0.2
+if [[ "${VRAW}" =~ ^v0\.2 ]]; then
+  if try_print "## v0.2-rc"; then
+    echo -e "\n> note: fallback sur la section v0.2-rc (aucune section spécifique trouvée pour ${TAG})" >&2
+    exit 0
+  fi
+fi
+
+# 4) Fallback global (entier) avec avertissement
+echo "> warning: aucune section dédiée au tag ${TAG} — impression complète de ${NOTES}" >&2
+cat "${NOTES}"
+exit 0
diff --git a/Makefile b/Makefile
--- a/Makefile
+++ b/Makefile
@@ -1,6 +1,7 @@
 .ONESHELL:
 SHELL := bash
 
+TAG ?= v0.2.0-rc.1
 DEVIT_PKG ?= devit-cli
 DEVIT_BIN ?= devit
 
@@ -36,3 +37,23 @@ help-cli:
 	@echo "release-cli    : build release du binaire $(DEVIT_BIN)"
 	@echo "run-cli        : lance $(DEVIT_BIN) --help"
 	@echo "check-cli      : fmt + clippy -D warnings + tests"
 	@echo "ci-cli         : check-cli + build-cli"
+
+.PHONY: release-draft release-publish
+release-draft:
+	@if ! command -v gh >/dev/null 2>&1; then \
+	  echo "error: GitHub CLI 'gh' non trouvé. Installe-le puis authentifie-toi (gh auth login)"; exit 2; \
+	fi
+	chmod +x scripts/extract_release_notes.sh
+	scripts/extract_release_notes.sh "$(TAG)" > /tmp/devit_release_notes.md
+	# crée ou met à jour en draft
+	gh release create "$(TAG)" --draft -F /tmp/devit_release_notes.md || \
+	  gh release edit   "$(TAG)" --draft -F /tmp/devit_release_notes.md
+	@echo "Draft créée/mise à jour pour $(TAG)"
+
+release-publish:
+	@if ! command -v gh >/dev/null 2>&1; then \
+	  echo "error: GitHub CLI 'gh' non trouvé. Installe-le puis authentifie-toi (gh auth login)"; exit 2; \
+	fi
+	# Publie la release (enlève le draft)
+	gh release edit "$(TAG)" --draft=false
+	@echo "Release publiée pour $(TAG)"
