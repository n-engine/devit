#!/usr/bin/env bash
set -euo pipefail

LOG_DIR="/tmp/devit-notify"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/notify.log"
export DISPLAY="${DISPLAY:-:0}"

# Config retry
MAX_RETRIES=3
RETRY_DELAY=15
ACK_TIMEOUT=30
API_URL="${LM_STUDIO_API:-http://localhost:1234}"

TASK_ID="${DEVIT_NOTIFY_TASK_ID:-}"
STATUS="${DEVIT_NOTIFY_STATUS:-}"

# Log initial
{
  echo "[$(date --iso-8601=seconds)] Notification re√ßue"
  echo "  DISPLAY: ${DISPLAY}"
  echo "  Task: ${TASK_ID:-<unset>} | Status: ${STATUS:-<unset>}"
} >>"$LOG_FILE"

# Validation
[[ -z "$TASK_ID" || -z "$STATUS" ]] && {
  echo "  ‚ùå Vars manquantes, skip" >>"$LOG_FILE"
  exit 0
}

# Pr√©pare marker ACK (daemon override ou fallback)
ACK_MARKER="${DEVIT_ACK_MARKER:-$LOG_DIR/ack-${TASK_ID}-$$}"
echo "  ACK marker: ${ACK_MARKER}" >>"$LOG_FILE"

# Fonction: check API health
check_api_health() {
  if curl -s -m 3 "$API_URL/v1/models" >/dev/null 2>&1; then
    echo "  ‚úÖ API health check passed" >>"$LOG_FILE"
    return 0
  else
    echo "  ‚ö†Ô∏è  API non responsive ($API_URL)" >>"$LOG_FILE"
    return 1
  fi
}

# Fonction: envoyer message √† llm
send_to_llm() {
  # Sanitize summary (escape quotes, strip newlines)
  local msg="task: ${TASK_ID} status: ${STATUS}"
  
  if [[ -n "${DEVIT_NOTIFY_SUMMARY:-}" ]]; then
    local summary=$(echo "$DEVIT_NOTIFY_SUMMARY" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 80)
    local summary_len=${#summary}
    if [[ $summary_len -le 20 ]]; then
      msg+=" | ${summary}"
    fi
  fi
  
  # V√©rifie tools dispos
  if ! command -v wmctrl >/dev/null || ! command -v xdotool >/dev/null; then
    echo "  ‚ö†Ô∏è  wmctrl/xdotool manquant" >>"$LOG_FILE"
    return 1
  fi
  
  # Health check API avant focus
  if ! check_api_health; then
    echo "  ‚ö†Ô∏è  Skip focus (API down)" >>"$LOG_FILE"
    return 1
  fi
  
  # Focus llm window avec fallback
  if ! timeout 5 wmctrl -xa "LM Studio" 2>&1 >>"$LOG_FILE"; then
    echo "  ‚ö†Ô∏è  wmctrl failed, trying window ID lookup" >>"$LOG_FILE"
    
    local win_id=$(wmctrl -l | grep -i "LM Studio" | head -1 | awk '{print $1}')
    
    if [[ -n "$win_id" ]]; then
      echo "  ‚Üí Found window: $win_id" >>"$LOG_FILE"
      xdotool windowactivate "$win_id" 2>&1 >>"$LOG_FILE" || return 1
      # Click pour wake-up si minimized
      xdotool click --window "$win_id" 1 2>&1 >>"$LOG_FILE" || true
      sleep 1
    else
      echo "  ‚ùå Window ID introuvable" >>"$LOG_FILE"
      return 1
    fi
  fi
  
  sleep 0.5
  xdotool type "${msg}" 2>&1 >>"$LOG_FILE"
  sleep 0.5
  xdotool key Return 2>&1 >>"$LOG_FILE"
  
  echo "  ‚úÖ Message envoy√©: ${msg}" >>"$LOG_FILE"
  return 0
}

# Fonction: attendre ACK du daemon
wait_for_ack() {
  local timeout=$ACK_TIMEOUT
  
  for i in $(seq 1 $timeout); do
    if [[ -f "$ACK_MARKER" ]]; then
      echo "  ‚úÖ ACK re√ßu (${i}s)" >>"$LOG_FILE"
      rm -f "$ACK_MARKER"
      return 0
    fi
    sleep 1
  done
  
  echo "  ‚ö†Ô∏è  Timeout ACK (${timeout}s)" >>"$LOG_FILE"
  return 1
}

# Main retry loop
for attempt in $(seq 1 $MAX_RETRIES); do
  {
    echo ""
    echo "[$(date --iso-8601=seconds)] Tentative ${attempt}/${MAX_RETRIES}"
  } >>"$LOG_FILE"
  
  # Envoyer message
  if send_to_llm; then
    # Attendre ACK
    if wait_for_ack; then
      echo "  üéâ Notification compl√®te avec ACK" >>"$LOG_FILE"
      exit 0
    fi
  else
    echo "  ‚ùå √âchec envoi message" >>"$LOG_FILE"
  fi
  
  # Retry delay (sauf derni√®re tentative)
  if [[ $attempt -lt $MAX_RETRIES ]]; then
    echo "  ‚è≥ Retry dans ${RETRY_DELAY}s..." >>"$LOG_FILE"
    sleep $RETRY_DELAY
    # Augmente timeout ACK progressivement
    export ACK_TIMEOUT=$((ACK_TIMEOUT + 10))
  fi
done

# √âchec final
{
  echo ""
  echo "[$(date --iso-8601=seconds)] ‚ùå √âCHEC FINAL"
  echo "  LM Studio probablement offline ou occup√©"
  echo "  Task: ${TASK_ID} | Status: ${STATUS}"
  echo "  API: ${API_URL}"
} >>"$LOG_FILE"

exit 1
