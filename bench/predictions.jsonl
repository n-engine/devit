{"instance_id": "astropy__astropy-12907", "model_name_or_path": "devit-local", "model_patch": "```\n--- a/separability_matrix.py\n+++ b/separability_matrix.py\n@@ -19,9 +19,10 @@\n         return np.array([[comp[0].is_linear and comp[1].is_model\n                          for _ in range(len(comp))]\n                         for comp in models if len(comp) > 1])\n \n-        separable = [all(p.is_linear for p in components) for components in models]\n+        separable = [all(p.is_linear or p.__class__.__name__ == \"CompoundModel\"  \n+                        for p in components) for components in models]\n         return np.array([[s for s in rows] for rows in zip(*separable)])\n```\n\nThis unified diff changes the `separability_matrix` function to check if a component is an instance of CompoundModel when deciding whether its outputs and inputs are separable. This should fix the bug where nested CompoundModels were reported as not being separable when they actually were."}
{"instance_id": "astropy__astropy-14182", "model_name_or_path": "devit-local", "model_patch": "```\n--- a:(new file)\n+++ b:(new file)\n\n@@ -1 +2 @@\n- \n+### Description\n\n@@ -3 +4 @@\n-The RestructuredText output of this Astropy Table\n+It would be great if the following would work:\n\n@@ -5 +6 @@\n-Helps in creating documentation.\n+```Python\n+>>> from astropy.table import QTable\n+>>> import astropy.units as u\n+>>> import sys\n+>>> tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+>>> tbl.write(sys.stdout, format=\"ascii.rst\")\n+===== ========\n+ wave response\n+===== ========\n+350.0      0.7\n+950.0      1.2\n+===== ========\n\n@@ -16 +17 @@\n- \n+```Python\n+>>> from astropy.table import QTable\n+>>> import astropy.units as u\n+>>> import sys\n+>>> tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+>>> tbl.write(sys.stdout, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+|  wave | response |\n+|    nm |       ct |\n+| 350.0 |      0.7 |\n+| 950.0 |      1.2 |\n\n@@ -26 +27 @@\n- \n+```Python\n+>>> from astropy.table import QTable\n+>>> import astropy.units as u\n+>>> import sys\n+>>> tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+>>> tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n```\nNote: Please keep in mind that RestructuredText support is not built into Astropy. You may need to implement this functionality yourself or rely on external tools. This unified diff does not include an actual RST writer since it's a feature request rather than a standard capability of Astropy."}
{"instance_id": "astropy__astropy-14365", "model_name_or_path": "devit-local", "model_patch": "--- qdp.py ~1 2023-03-02 14:43:19.000000000 +0100\n+++ qdp.py 2023-03-02 14:43:44.000000000 +0100\n@@ -41,7 +41,7 @@\n         # Try to skip over the header rows.\n-        if re.match(r'^(QDP|Table)$', line):\n+        if re.match(r'^(?:qdp|table|[a-z]+\\s+(serr|read|\\*\\*\\d+\\*\\*)).*', line, re.IGNORECASE):\n             self.in_header = False\n         # If we're still in the header, skip to the next line.\n     continue"}
{"instance_id": "astropy__astropy-14995", "model_name_or_path": "devit-local", "model_patch": "--- a/CONTRIBUTING.md\tb/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\t@@&#8211;-0,1 +2-3 @@\n+## Reporting Issues\n+\n+GitHub issues in the Astropy repository are used to track bug reports and feature requests; If your issue poses a question about how to use Astropy, please instead raise your question in the Astropy Discourse user forum and close this issue.\n\n--- a/issue_***.md\tb/issue_***.md\n+++ b/issue_***.md\t@@&#8211;-1,4 +2-5 @@\n+### Versions\n+\n+>>> import sys; print(\"Python\", sys.version)\n+Python 3.10.11 | packaged by conda-forge | (main, May 10 2023, 19:07:22) [Clang 14.0.6 ]\n+>>> import astropy; print(\"astropy\", astropy.__version__)\n+astropy 5.3\n+>>> import numpy; print(\"Numpy\", numpy.__version__)\n+Numpy 1.24.3\n+>>> import erfa; print(\"pyerfa\", erfa.__version__)\n+pyerfa 2.0.0.3\n+>>> import scipy; print(\"Scipy\", scipy.__version__)\n+Scipy 1.10.1\n+>>> import matplotlib; print(\"Matplotlib\", matplotlib.__version__)\n+Matplotlib 3.7.1\n\n--- a/issue_***.txt\tb/issue_***.txt\n+++ b/issue_***.txt\t@@&#8211;-0,13 +2-14 @@\n+Goal: In v5.3, NDDataRef mask propagation fails when one of the operand does not have a mask\n+\n+### Description\n+\n+It looks like when one of the operand does not have a mask, the mask propagation when doing arithmetic, in particular with `handle_mask=np.bitwise_or` fails.  This is not a problem in v5.2.\n+\n+I don't know enough about how all that works, but it seems from the error that the operand without a mask is set as a mask of None's and then the bitwise_or tries to operate on an integer and a None and fails.\n+\n+### Expected behavior\n+\n+When one of the operand does not have mask, the mask that exists should just be copied over to the output.  Or whatever was done in that situation in v5.2 where there's no problem.\n\n--- a/issue_***.py\tb/issue_***.py\n+++ b/issue_***.py\t@@&#8211;-16,14 +18-26 @@\n+# multiply mask by constant (mask * no mask)\n+>>> nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\n+...\n+TypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\n+\n+# multiply mask by itself (mask * mask)\n+>>> nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask\n+array([[0, 1, 64],\n+       [8, 0, 1],\n+       [2, 1, 0]])\n+\n+# multiply mask by no mask (mask * no mask)\n+>>> nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\n+...\n+TypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\n\n--- a/issue_***.py\t(Added)\n\n--- a/report_bug.py\tb/report_bug.py\n+++ b/report_bug.py\t@@&#8211;-2,3 +4-5 @@\n+if __name__ == \"__main__\":\n+    import numpy as np\n+    from astropy.nddata import NDDataRef\n\n--- a/issue_***.patch\t(Added)\n\n--- a/github.com/astropy/astropy/pull/new\t(Added)\n\n--- a/github.com/astropy/astropy/blob/83f6f002fb11853eacb689781d366be6aa170e0e/astropy/nddata/nddata.py#L51-L55\t(Added)\n\n--- a/github.com/astropy/astropy/pull/14175\t(Added)"}
{"instance_id": "astropy__astropy-6938", "model_name_or_path": "devit-local", "model_patch": "```\n--- a/fitsrec.py\n+++ b/fitsrec.py\n@@ -0,0 +1,11 @@\n+        # Replace exponent separator in floating point numbers\n+        if 'D' in format:\n+            output_field = output_field.replace(encode_ascii('E'), encode_ascii('D'))\n```\n\nNote: The unified diff tool only shows the lines that have changed between the two files."}
