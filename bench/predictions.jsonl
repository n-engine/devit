{"instance_id": "astropy__astropy-12907", "model_name_or_path": "devit-local", "model_patch": "```\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -30,6 +30,7 @@\n \n     def _get_matrices(self, model):\n         matrices = []\n+        prev_inputs = None\n         for component in self.components:\n             matrix, inputs = model._separability_matrix(component)\n             if inputs != prev_inputs:  # <--- fix here\n                 matrices.append(matrix)\n             else:\n                 last_matrix = matrices[-1]\n@@ -41,6 +42,7 @@\n \n     def _get_matrices(self, model):\n         matrices = []\n+        prev_inputs = None\n         for component in self.components:\n             matrix, inputs = model._separability_matrix(component)\n             if inputs != prev_inputs:  # <--- fix here\n                 matrices.append(matrix)\n@@ -45,8 +47,10 @@\n \n     def _separability_matrix(self, component):\n-        return component.separability_matrix()\n+        inputs = list(range(len(component.n_inputs)))\n+        return component.separability_matrix(), inputs\n\n-    def check_separable(self):\n+    def _check_separable(self, mat):\n         for i in range(mat.shape[0]):\n             if sum(mat[i]) > 1:  # non-separable\n                 self._sep_matrix = False\n@@ -51,8 +55,6 @@\n \n     separability_matrix = property(_get_matrices, doc=\"Returns the separability matrix of this model.\")\n \n+class CompoundSeparable(modeling_separable):\n```"}
{"instance_id": "astropy__astropy-14182", "model_name_or_path": "devit-local", "model_patch": "Here's how you could make RestructuredText output support header rows:\n\n```\n--- /dev/fd/62  (content)\n+++ /dev/fd/63  (content)\n\n- wave response\n+ == Header ==\n+\n+|  wave |  nm |\n+| response |   ct. |\n+\n+===== ========\n+350.0     0.7\n+950.0     1.2\n+===== ========"}
{"instance_id": "astropy__astropy-14365", "model_name_or_path": "devit-local", "model_patch": "@@ -1,7 +1,7 @@\n-Warning: table_id not specified. Reading the first available table [astropy.io.ascii.qdp]\n+Warning: table_id not specified. Reading the first available table [astropy.io.ascii.qdp]\n\n--- a/astropy/io/ascii/qdp.py    2022-12-07 02:03:23 +0000\n+++ b/astropy/io/ascii/qdp.py    2022-12-07 02:03:23 +0000\n@@ -1,8 +1 @@\n-import re\n\n--- a/astropy/core/exceptions.py    2022-12-07 02:03:23 +0000\n+++ b/astropy/core/exceptions.py    2022-12-07 02:03:23 +0000\n@@ -26,6 +26,7 @@\n class ValueError(astropystatsstatserrorsRuntimeError):\n     pass\n\n--- a/tests/test_qdp.py    2022-12-07 02:03:23 +0000\n+++ b/tests/test_qdp.py    2022-12-07 02:03:23 +0000\n@@ -1,11 +1 @@\n-import unittest\n-from astropy.io.ascii import QDP\n\n-class TestQdp(unittest.TestCase):\n+class TestQdp(unittest.TestCase):\n\n--- a/.github/workflows/issue_templates.yml    2022-12-07 02:03:23 +0000\n+++ b/.github/workflows/issue_templates.yml    2022-12-07 02:03:23 +0000"}
{"instance_id": "astropy__astropy-14995", "model_name_or_path": "devit-local", "model_patch": "```\ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex bf1d5ee..7a45f4c 100644\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -19,6 +19,6 @@\n## Report Bugs and Request Features\n\nA project member will respond to you as soon as possible; in the meantime, please double-check the guidelines for submitting issues and make sure you've provided the requested details.\n\n- GitHub issues in the Astropy repository are used to track bug reports and feature requests; If your issue poses a question about how to use Astropy, please instead raise your question in the Astropy Discourse user forum and close this issue.\n+ GitHub issues in the Astropy repository are used to tracker bug reports and feature requests; If your issue poses a question about how to use Astropy, please instead raise your question in the Astropy Discourse user forum and close this issue.\n\ndiff --git a/tests/test_nddata.py b/tests/test_nddata.py\nindex 3be07f2..d8c0ba1 100644\n--- a/tests/test_nddata.py\n+++ b/tests/test_nddata.py\n@@ -123,6 +123,23 @@\n    def test_mask_propagation(self):\n\n        array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+       mask = np.array([[False, True, None], [True, False, True], [None, True, False]])\n+\n+       nref_nomask = NDDataRef(array)\n+       nref_mask = NDDataRef(array, mask=mask)\n\n# multiply no mask by constant (no mask * no mask)\n-       self.assertTrue((nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask).dtype == np.dtype(bool))\n+       self.assert_array_equal(nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask, [[False, True, None], [True, False, True], [None, True, False]], dtype=bool)\n\n# multiply no mask by itself (no mask * no mask)\n-       self.assertTrue((nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask).dtype == np.dtype(bool))\n+       self.assert_array_equal(nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, [[False, True, None], [True, False, True], [None, True, False]], dtype=bool)\n\n# multiply mask by constant (mask * no mask)\n-       self.assertTrue((nref_mask.multiply(1., handle_mask=np.bitwise_or).mask).dtype == np.dtype(bool))\n+       self.assert_array_equal(nref_mask.multiply(1., handle_mask=np.bitwise_or).mask, [[None, True, None], [True, False, True], [False, True, False]], dtype=bool)\n\n# multiply mask by itself (mask * mask)\n-       self.assertTrue((nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask).dtype == np.dtype(bool))\n+       self.assert_array_equal(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, [[False, True, 65], [8, 0, 1], [2, 1, 0]], dtype=bool)\n\n# multiply mask by no mask (mask * no mask)\n-       nref_nomask = NDDataRef(array)\n+       self.assert_array_equal(nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, [[False, True, None], [True, False, True], [None, True, False]])\n   ```"}
{"instance_id": "astropy__astropy-6938", "model_name_or_path": "devit-local", "model_patch": "```\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -44,7 +44,6 @@\n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n```"}
