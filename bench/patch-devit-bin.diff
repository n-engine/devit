diff --git a/bench/generate_predictions.py b/bench/generate_predictions.py
index 1111111..2222222 100755
--- a/bench/generate_predictions.py
+++ b/bench/generate_predictions.py
@@ -1,17 +1,18 @@
 #!/usr/bin/env python3
 import argparse
 import json
 import os
 import shutil
 import subprocess
 from pathlib import Path
 
 from datasets import load_dataset
 from git import Repo
 from tqdm import tqdm
 
-# ... (le reste inchangé jusqu'aux helpers)
+# ... (imports identiques)
 
 def run(cmd, cwd=None, check=True):
     proc = subprocess.run(cmd, cwd=cwd, text=True, capture_output=True)
     if check and proc.returncode != 0:
         raise RuntimeError(f"Command failed: {' '.join(cmd)}\nSTDOUT:\n{proc.stdout}\nSTDERR:\n{proc.stderr}")
     return proc
 
@@ -48,13 +49,43 @@ def build_goal(record: dict) -> str:
     if not goal:
         goal = f"Resolve issue {record.get('instance_id','')}"
     return goal
 
-def devit_suggest(goal: str, cwd: Path) -> str:
-    """Appelle `devit suggest --goal ...` et retourne le diff unifié (stdout)."""
-    backend_url = os.environ.get('DEVIT_BACKEND_URL')
-    env = os.environ.copy()
-    if backend_url:
-        env['DEVIT_BACKEND_URL'] = backend_url
-    proc = run(["devit", "suggest", "--goal", goal, str(cwd)], cwd=cwd, check=False)
+def resolve_devit_cmd(explicit_bin: str | None = None):
+    """
+    Résout la commande DevIt à exécuter.
+    Ordre de priorité :
+      1) --devit-bin (chemin vers binaire)
+      2) $DEVIT_BIN (chemin vers binaire)
+      3) $DEVIT_REPO (utilise `cargo run -p devit --`)
+      4) 'devit' dans le PATH
+    """
+    if explicit_bin and os.path.isfile(explicit_bin) and os.access(explicit_bin, os.X_OK):
+        return [explicit_bin], None
+    env_bin = os.environ.get("DEVIT_BIN")
+    if env_bin and os.path.isfile(env_bin) and os.access(env_bin, os.X_OK):
+        return [env_bin], None
+    devit_repo = os.environ.get("DEVIT_REPO")
+    if devit_repo and os.path.isdir(devit_repo):
+        return (["cargo", "run", "-p", "devit", "--"], devit_repo)
+    # fallback PATH
+    if shutil.which("devit"):
+        return ["devit"], None
+    raise FileNotFoundError(
+        "DevIt introuvable. Fournis --devit-bin=/path/to/devit "
+        "ou exporte DEVIT_BIN, ou DEVIT_REPO pour utiliser `cargo run`."
+    )
+
+def devit_suggest(goal: str, cwd: Path, devit_bin: str | None = None) -> str:
+    """Appelle DevIt et retourne le diff unifié (stdout)."""
+    env = os.environ.copy()
+    # (optionnel) backend override via DEVIT_BACKEND_URL déjà pris depuis env
+    cmd, repo_root = resolve_devit_cmd(devit_bin)
+    full_cmd = cmd + ["suggest", "--goal", goal, str(cwd)]
+    if repo_root:
+        # si on passe par cargo run, on lance depuis la racine du repo DevIt
+        proc = run(full_cmd, cwd=repo_root, check=False)
+    else:
+        proc = run(full_cmd, cwd=cwd, check=False)
     return proc.stdout.strip()
 
 def main():
     ap = argparse.ArgumentParser()
     ap.add_argument('--instances', required=True, help='Fichier texte avec une instance_id par ligne')
     ap.add_argument('--output', default='predictions.jsonl')
     ap.add_argument('--workdir', default='./workspaces')
     ap.add_argument('--dataset', default='princeton-nlp/SWE-bench_Lite')
+    ap.add_argument('--devit-bin', default=None, help='Chemin explicite vers le binaire devit (sinon DEVIT_BIN/DEVIT_REPO/PATH)')
     args = ap.parse_args()
@@ -81,7 +112,7 @@ def main():
 
             # Générer le diff via DevIt (patch-only)
-            diff = devit_suggest(goal, code_dir)
+            diff = devit_suggest(goal, code_dir, devit_bin=args.devit_bin)
             if not diff:
                 print(f"[WARN] empty diff for {iid}")
                 continue
